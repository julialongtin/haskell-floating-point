
//
// {{TYPE}}
//

static inline {{TYPE}} rounded_add_impl_{{NAME}}(native_rounding_mode mode, {{TYPE}} a, {{TYPE}} b)
{
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, mode);
    volatile {{TYPE}} c = a + b;
    restore_fp_reg(oldreg);
    return c;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_add_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a, {{TYPE}} b)
{ return rounded_add_impl_{{NAME}}({{MODE_ARG}}, a, b); }
{{/each_rounding_mode}}

static inline {{TYPE}} rounded_sub_impl_{{NAME}}(native_rounding_mode mode, {{TYPE}} a, {{TYPE}} b)
{
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, mode);
    volatile {{TYPE}} c = a - b;
    restore_fp_reg(oldreg);
    return c;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_sub_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a, {{TYPE}} b)
{ return rounded_sub_impl_{{NAME}}({{MODE_ARG}}, a, b); }
{{/each_rounding_mode}}

static inline {{TYPE}} rounded_mul_impl_{{NAME}}(native_rounding_mode mode, {{TYPE}} a, {{TYPE}} b)
{
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, mode);
    volatile {{TYPE}} c = a * b;
    restore_fp_reg(oldreg);
    return c;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_mul_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a, {{TYPE}} b)
{ return rounded_mul_impl_{{NAME}}({{MODE_ARG}}, a, b); }
{{/each_rounding_mode}}

static inline {{TYPE}} rounded_div_impl_{{NAME}}(native_rounding_mode mode, {{TYPE}} a, {{TYPE}} b)
{
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, mode);
    volatile {{TYPE}} c = a / b;
    restore_fp_reg(oldreg);
    return c;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_div_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a, {{TYPE}} b)
{ return rounded_div_impl_{{NAME}}({{MODE_ARG}}, a, b); }
{{/each_rounding_mode}}

static inline {{TYPE}} rounded_sqrt_impl_{{NAME}}(native_rounding_mode mode, {{TYPE}} a)
{
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, mode);
    volatile {{TYPE}} c = {{sqrt}}(a);
    restore_fp_reg(oldreg);
    return c;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_sqrt_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a)
{ return rounded_sqrt_impl_{{NAME}}({{MODE_ARG}}, a); }
{{/each_rounding_mode}}

static inline {{TYPE}} rounded_fma_impl_{{NAME}}(native_rounding_mode mode, {{TYPE}} a, {{TYPE}} b, {{TYPE}} c)
{
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, mode);
    volatile {{TYPE}} result = {{fma}}(a, b, c);
    restore_fp_reg(oldreg);
    return result;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_fma_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a, {{TYPE}} b, {{TYPE}} c)
{ return rounded_fma_impl_{{NAME}}({{MODE_ARG}}, a, b, c); }
{{/each_rounding_mode}}

static inline {{TYPE}} rounded_fma_if_fast_impl_{{NAME}}(native_rounding_mode mode, {{TYPE}} a, {{TYPE}} b, {{TYPE}} c)
{
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, mode);
#ifdef {{FP_FAST_FMA}}
    volatile {{TYPE}} result = {{fma}}(a, b, c);
#else
    volatile {{TYPE}} result = a * b + c;
#endif
    restore_fp_reg(oldreg);
    return result;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_fma_if_fast_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a, {{TYPE}} b, {{TYPE}} c)
{ return rounded_fma_if_fast_impl_{{NAME}}({{MODE_ARG}}, a, b, c); }
{{/each_rounding_mode}}

//
// Conversion
//

static inline {{TYPE}} rounded_int64_to_{{NAME}}_impl(native_rounding_mode mode, int64_t x)
{
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, mode);
    volatile {{TYPE}} result = ({{TYPE}})x;
    restore_fp_reg(oldreg);
    return result;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_int64_to_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}int64_t x)
{ return rounded_int64_to_{{NAME}}_impl({{MODE_ARG}}, x); }
{{/each_rounding_mode}}

static inline {{TYPE}} rounded_word64_to_{{NAME}}_impl(native_rounding_mode mode, uint64_t x)
{
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, mode);
    volatile {{TYPE}} result = ({{TYPE}})x;
    restore_fp_reg(oldreg);
    return result;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_word64_to_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}uint64_t x)
{ return rounded_word64_to_{{NAME}}_impl({{MODE_ARG}}, x); }
{{/each_rounding_mode}}

//
// Interval arithmetic
//

extern {{TYPE}} rounded_hw_interval_mul_{{NAME}}_up({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2)
{
    // TODO: zero and infinity
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, ROUND_UPWARD);
    volatile {{TYPE}} hi = {{fmax}}({{fmax}}(lo1 * lo2, lo1 * hi2), {{fmax}}(hi1 * lo2, hi1 * hi2));
    restore_fp_reg(oldreg);
    return hi;
}

extern {{TYPE}} rounded_hw_interval_mul_{{NAME}}_down({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2)
{
    // TODO: zero and infinity
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, ROUND_DOWNWARD);
    volatile {{TYPE}} lo = {{fmin}}({{fmin}}(lo1 * lo2, lo1 * hi2), {{fmin}}(hi1 * lo2, hi1 * hi2));
    restore_fp_reg(oldreg);
    return lo;
}

extern {{TYPE}} rounded_hw_interval_mul_add_{{NAME}}_up({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2, {{TYPE}} hi3)
{
    // TODO: zero and infinity
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, ROUND_UPWARD);
    volatile {{TYPE}} hi = {{fmax}}({{fmax}}(lo1 * lo2, lo1 * hi2), {{fmax}}(hi1 * lo2, hi1 * hi2)) + hi3;
    restore_fp_reg(oldreg);
    return hi;
}

extern {{TYPE}} rounded_hw_interval_mul_add_{{NAME}}_down({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2, {{TYPE}} lo3)
{
    // TODO: zero and infinity
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, ROUND_DOWNWARD);
    volatile {{TYPE}} lo = {{fmin}}({{fmin}}(lo1 * lo2, lo1 * hi2), {{fmin}}(hi1 * lo2, hi1 * hi2)) + lo3;
    restore_fp_reg(oldreg);
    return lo;
}

extern {{TYPE}} rounded_hw_interval_div_{{NAME}}_up({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2)
{
    // TODO: zero and infinity
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, ROUND_UPWARD);
    volatile {{TYPE}} hi = {{fmax}}({{fmax}}(lo1 / lo2, lo1 / hi2), {{fmax}}(hi1 / lo2, hi1 / hi2));
    restore_fp_reg(oldreg);
    return hi;
}

extern {{TYPE}} rounded_hw_interval_div_{{NAME}}_down({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2)
{
    // TODO: zero and infinity
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, ROUND_DOWNWARD);
    volatile {{TYPE}} lo = {{fmin}}({{fmin}}(lo1 / lo2, lo1 / hi2), {{fmin}}(hi1 / lo2, hi1 / hi2));
    restore_fp_reg(oldreg);
    return lo;
}

//
// Summation
//

static inline {{TYPE}} rounded_sum_impl_{{NAME}}(native_rounding_mode mode, HsInt offset, HsInt length, const {{TYPE}} *a)
{
    fp_reg oldreg = get_fp_reg();
    set_rounding(oldreg, mode);
    volatile {{TYPE}} s = 0.0{{LIT_SUFFIX}};
    for (HsInt i = 0; i < length; ++i) {
        s += a[offset + i];
    }
    restore_fp_reg(oldreg);
    return s;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_sum_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}HsInt offset, HsInt length, const {{TYPE}} *a)
{ return rounded_sum_impl_{{NAME}}({{MODE_ARG}}, offset, length, a); }
{{/each_rounding_mode}}
