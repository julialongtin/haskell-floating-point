
//
// {{TYPE}}
//

static inline ALWAYS_INLINE
{{TYPE}} rounded_add_impl_{{NAME}}(native_rounding_mode mode, {{TYPE}} a, {{TYPE}} b)
{
    {{VECTOR}} av = _mm_set{{SIMD_SUFFIX}}(a);
    {{VECTOR}} bv = _mm_set{{SIMD_SUFFIX}}(b);
    {{VECTOR}} resultv;
    switch (mode) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        resultv = _mm_add_round{{SIMD_SUFFIX}}(av, bv, {{_MM_FROUND_MODE}} | _MM_FROUND_NO_EXC);
        break;
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
    {{TYPE}} result;
    _mm_store{{SIMD_SUFFIX}}(&result, resultv);
    return result;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_add_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a, {{TYPE}} b)
{ return rounded_add_impl_{{NAME}}({{MODE_ARG}}, a, b); }
{{/each_rounding_mode}}

static inline ALWAYS_INLINE
{{TYPE}} rounded_sub_impl_{{NAME}}(native_rounding_mode mode, {{TYPE}} a, {{TYPE}} b)
{
    {{VECTOR}} av = _mm_set{{SIMD_SUFFIX}}(a);
    {{VECTOR}} bv = _mm_set{{SIMD_SUFFIX}}(b);
    {{VECTOR}} resultv;
    switch (mode) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        resultv = _mm_sub_round{{SIMD_SUFFIX}}(av, bv, {{_MM_FROUND_MODE}} | _MM_FROUND_NO_EXC);
        break;
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
    {{TYPE}} result;
    _mm_store{{SIMD_SUFFIX}}(&result, resultv);
    return result;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_sub_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a, {{TYPE}} b)
{ return rounded_sub_impl_{{NAME}}({{MODE_ARG}}, a, b); }
{{/each_rounding_mode}}

static inline ALWAYS_INLINE
{{TYPE}} rounded_mul_impl_{{NAME}}(native_rounding_mode mode, {{TYPE}} a, {{TYPE}} b)
{
    {{VECTOR}} av = _mm_set{{SIMD_SUFFIX}}(a);
    {{VECTOR}} bv = _mm_set{{SIMD_SUFFIX}}(b);
    {{VECTOR}} resultv;
    switch (mode) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        resultv = _mm_mul_round{{SIMD_SUFFIX}}(av, bv, {{_MM_FROUND_MODE}} | _MM_FROUND_NO_EXC);
        break;
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
    {{TYPE}} result;
    _mm_store{{SIMD_SUFFIX}}(&result, resultv);
    return result;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_mul_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a, {{TYPE}} b)
{ return rounded_mul_impl_{{NAME}}({{MODE_ARG}}, a, b); }
{{/each_rounding_mode}}

static inline ALWAYS_INLINE
{{TYPE}} rounded_div_impl_{{NAME}}(native_rounding_mode mode, {{TYPE}} a, {{TYPE}} b)
{
    {{VECTOR}} av = _mm_set{{SIMD_SUFFIX}}(a);
    {{VECTOR}} bv = _mm_set{{SIMD_SUFFIX}}(b);
    {{VECTOR}} resultv;
    switch (mode) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        resultv = _mm_div_round{{SIMD_SUFFIX}}(av, bv, {{_MM_FROUND_MODE}} | _MM_FROUND_NO_EXC);
        break;
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
    {{TYPE}} result;
    _mm_store{{SIMD_SUFFIX}}(&result, resultv);
    return result;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_div_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a, {{TYPE}} b)
{ return rounded_div_impl_{{NAME}}({{MODE_ARG}}, a, b); }
{{/each_rounding_mode}}

static inline ALWAYS_INLINE
{{TYPE}} rounded_sqrt_impl_{{NAME}}(native_rounding_mode mode, {{TYPE}} a)
{
    {{VECTOR}} av = _mm_set{{SIMD_SUFFIX}}(a);
    {{VECTOR}} resultv;
    switch (mode) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        resultv = _mm_sqrt_round{{SIMD_SUFFIX}}(av, av, {{_MM_FROUND_MODE}} | _MM_FROUND_NO_EXC);
        break;
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
    {{TYPE}} result;
    _mm_store{{SIMD_SUFFIX}}(&result, resultv);
    return result;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_sqrt_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a)
{ return rounded_sqrt_impl_{{NAME}}({{MODE_ARG}}, a); }
{{/each_rounding_mode}}

static inline ALWAYS_INLINE
{{TYPE}} rounded_fma_impl_{{NAME}}(native_rounding_mode mode, {{TYPE}} a, {{TYPE}} b, {{TYPE}} c)
{
    {{VECTOR}} av = _mm_set{{SIMD_SUFFIX}}(a);
    {{VECTOR}} bv = _mm_set{{SIMD_SUFFIX}}(b);
    {{VECTOR}} cv = _mm_set{{SIMD_SUFFIX}}(c);
    {{VECTOR}} resultv;
    switch (mode) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        resultv = _mm_fmadd_round{{SIMD_SUFFIX}}(av, bv, cv, {{_MM_FROUND_MODE}} | _MM_FROUND_NO_EXC);
        break;
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
    {{TYPE}} result;
    _mm_store{{SIMD_SUFFIX}}(&result, resultv);
    return result;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_fma_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a, {{TYPE}} b, {{TYPE}} c)
{ return rounded_fma_impl_{{NAME}}({{MODE_ARG}}, a, b, c); }
{{/each_rounding_mode}}

{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_fma_if_fast_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}{{TYPE}} a, {{TYPE}} b, {{TYPE}} c)
{ return rounded_fma_impl_{{NAME}}({{MODE_ARG}}, a, b, c); }
{{/each_rounding_mode}}

//
// Conversion
//

static inline {{TYPE}} rounded_int64_to_{{NAME}}_impl(native_rounding_mode mode, int64_t x)
{
    {{VECTOR}} resultv = _mm_set{{SIMD_SUFFIX}}(0.0{{LIT_SUFFIX}});
    switch (mode) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        resultv = _mm_cvt_roundi64{{SIMD_SUFFIX}}(resultv, x, {{_MM_FROUND_MODE}} | _MM_FROUND_NO_EXC);
        break;
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
    {{TYPE}} result;
    _mm_store{{SIMD_SUFFIX}}(&result, resultv);
    return result;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_int64_to_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}int64_t x)
{ return rounded_int64_to_{{NAME}}_impl({{MODE_ARG}}, x); }
{{/each_rounding_mode}}

static inline {{TYPE}} rounded_word64_to_{{NAME}}_impl(native_rounding_mode mode, uint64_t x)
{
    {{VECTOR}} resultv = _mm_set{{SIMD_SUFFIX}}(0.0{{LIT_SUFFIX}});
    switch (mode) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        resultv = _mm_cvt_roundu64{{SIMD_SUFFIX}}(resultv, x, {{_MM_FROUND_MODE}} | _MM_FROUND_NO_EXC);
        break;
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
    {{TYPE}} result;
    _mm_store{{SIMD_SUFFIX}}(&result, resultv);
    return result;
}
{{#each_rounding_mode}}
extern {{TYPE}} rounded_hw_word64_to_{{NAME}}{{MODE_SUFFIX}}({{MODE_PARAM}}uint64_t x)
{ return rounded_word64_to_{{NAME}}_impl({{MODE_ARG}}, x); }
{{/each_rounding_mode}}

//
// Interval arithmetic
//

static inline {{TYPE}} fast_fmax_{{NAME}}({{TYPE}} x, {{TYPE}} y)
{
    // should compile to MAX[SP][SD] instruction on x86
    return x > y ? x : y;
}
static inline {{TYPE}} fast_fmax4_{{NAME}}({{TYPE}} x, {{TYPE}} y, {{TYPE}} z, {{TYPE}} w)
{
    return fast_fmax_{{NAME}}(fast_fmax_{{NAME}}(x, y), fast_fmax_{{NAME}}(z, w));
}
static inline {{TYPE}} fast_fmin_{{NAME}}({{TYPE}} x, {{TYPE}} y)
{
    // should compile to MIN[SP][SD] instruction on x86
    return x < y ? x : y;
}
static inline {{TYPE}} fast_fmin4_{{NAME}}({{TYPE}} x, {{TYPE}} y, {{TYPE}} z, {{TYPE}} w)
{
    return fast_fmin_{{NAME}}(fast_fmin_{{NAME}}(x, y), fast_fmin_{{NAME}}(z, w));
}

extern {{TYPE}} rounded_hw_interval_mul_{{NAME}}_up({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2)
{
    {{TYPE}} x = rounded_mul_impl_{{NAME}}(ROUND_UPWARD, lo1, lo2);
    {{TYPE}} y = rounded_mul_impl_{{NAME}}(ROUND_UPWARD, lo1, hi2);
    {{TYPE}} z = rounded_mul_impl_{{NAME}}(ROUND_UPWARD, hi1, lo2);
    {{TYPE}} w = rounded_mul_impl_{{NAME}}(ROUND_UPWARD, hi1, hi2);
    if (isnan(x)) x = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    if (isnan(y)) y = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    if (isnan(z)) z = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    if (isnan(w)) w = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    return fast_fmax4_{{NAME}}(x, y, z, w);
}

extern {{TYPE}} rounded_hw_interval_mul_{{NAME}}_down({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2)
{
    {{TYPE}} x = rounded_mul_impl_{{NAME}}(ROUND_DOWNWARD, lo1, lo2);
    {{TYPE}} y = rounded_mul_impl_{{NAME}}(ROUND_DOWNWARD, lo1, hi2);
    {{TYPE}} z = rounded_mul_impl_{{NAME}}(ROUND_DOWNWARD, hi1, lo2);
    {{TYPE}} w = rounded_mul_impl_{{NAME}}(ROUND_DOWNWARD, hi1, hi2);
    if (isnan(x)) x = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    if (isnan(y)) y = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    if (isnan(z)) z = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    if (isnan(w)) w = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    return fast_fmin4_{{NAME}}(x, y, z, w);
}

extern {{TYPE}} rounded_hw_interval_mul_add_{{NAME}}_up({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2, {{TYPE}} hi3)
{
    {{TYPE}} x = rounded_mul_impl_{{NAME}}(ROUND_UPWARD, lo1, lo2);
    {{TYPE}} y = rounded_mul_impl_{{NAME}}(ROUND_UPWARD, lo1, hi2);
    {{TYPE}} z = rounded_mul_impl_{{NAME}}(ROUND_UPWARD, hi1, lo2);
    {{TYPE}} w = rounded_mul_impl_{{NAME}}(ROUND_UPWARD, hi1, hi2);
    if (isnan(x)) x = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    if (isnan(y)) y = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    if (isnan(z)) z = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    if (isnan(w)) w = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    {{TYPE}} p = fast_fmax4_{{NAME}}(x, y, z, w);
    return rounded_add_impl_{{NAME}}(ROUND_UPWARD, p, hi3);
}

extern {{TYPE}} rounded_hw_interval_mul_add_{{NAME}}_down({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2, {{TYPE}} lo3)
{
    {{TYPE}} x = rounded_mul_impl_{{NAME}}(ROUND_DOWNWARD, lo1, lo2);
    {{TYPE}} y = rounded_mul_impl_{{NAME}}(ROUND_DOWNWARD, lo1, hi2);
    {{TYPE}} z = rounded_mul_impl_{{NAME}}(ROUND_DOWNWARD, hi1, lo2);
    {{TYPE}} w = rounded_mul_impl_{{NAME}}(ROUND_DOWNWARD, hi1, hi2);
    if (isnan(x)) x = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    if (isnan(y)) y = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    if (isnan(z)) z = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    if (isnan(w)) w = 0.0{{LIT_SUFFIX}}; /* 0 * inf -> 0 */
    {{TYPE}} p = fast_fmin4_{{NAME}}(x, y, z, w);
    return rounded_add_impl_{{NAME}}(ROUND_DOWNWARD, p, lo3);
}

extern {{TYPE}} rounded_hw_interval_div_{{NAME}}_up({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2)
{
    {{TYPE}} x = rounded_div_impl_{{NAME}}(ROUND_UPWARD, lo1, lo2);
    {{TYPE}} y = rounded_div_impl_{{NAME}}(ROUND_UPWARD, lo1, hi2);
    {{TYPE}} z = rounded_div_impl_{{NAME}}(ROUND_UPWARD, hi1, lo2);
    {{TYPE}} w = rounded_div_impl_{{NAME}}(ROUND_UPWARD, hi1, hi2);
    if (isnan(x)) x = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    if (isnan(y)) y = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    if (isnan(z)) z = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    if (isnan(w)) w = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    return fast_fmax4_{{NAME}}(x, y, z, w);
}

extern {{TYPE}} rounded_hw_interval_div_{{NAME}}_down({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2)
{
    {{TYPE}} x = rounded_div_impl_{{NAME}}(ROUND_DOWNWARD, lo1, lo2);
    {{TYPE}} y = rounded_div_impl_{{NAME}}(ROUND_DOWNWARD, lo1, hi2);
    {{TYPE}} z = rounded_div_impl_{{NAME}}(ROUND_DOWNWARD, hi1, lo2);
    {{TYPE}} w = rounded_div_impl_{{NAME}}(ROUND_DOWNWARD, hi1, hi2);
    if (isnan(x)) x = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    if (isnan(y)) y = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    if (isnan(z)) z = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    if (isnan(w)) w = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    return fast_fmin4_{{NAME}}(x, y, z, w);
}

extern {{TYPE}} rounded_hw_interval_div_add_{{NAME}}_up({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2, {{TYPE}} hi3)
{
    {{TYPE}} x = rounded_div_impl_{{NAME}}(ROUND_UPWARD, lo1, lo2);
    {{TYPE}} y = rounded_div_impl_{{NAME}}(ROUND_UPWARD, lo1, hi2);
    {{TYPE}} z = rounded_div_impl_{{NAME}}(ROUND_UPWARD, hi1, lo2);
    {{TYPE}} w = rounded_div_impl_{{NAME}}(ROUND_UPWARD, hi1, hi2);
    if (isnan(x)) x = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    if (isnan(y)) y = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    if (isnan(z)) z = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    if (isnan(w)) w = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    {{TYPE}} p = fast_fmax4_{{NAME}}(x, y, z, w);
    return rounded_add_impl_{{NAME}}(ROUND_UPWARD, p, hi3);
}

extern {{TYPE}} rounded_hw_interval_div_add_{{NAME}}_down({{TYPE}} lo1, {{TYPE}} hi1, {{TYPE}} lo2, {{TYPE}} hi2, {{TYPE}} lo3)
{
    {{TYPE}} x = rounded_div_impl_{{NAME}}(ROUND_DOWNWARD, lo1, lo2);
    {{TYPE}} y = rounded_div_impl_{{NAME}}(ROUND_DOWNWARD, lo1, hi2);
    {{TYPE}} z = rounded_div_impl_{{NAME}}(ROUND_DOWNWARD, hi1, lo2);
    {{TYPE}} w = rounded_div_impl_{{NAME}}(ROUND_DOWNWARD, hi1, hi2);
    if (isnan(x)) x = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    if (isnan(y)) y = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    if (isnan(z)) z = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    if (isnan(w)) w = 0.0{{LIT_SUFFIX}}; /* 0 / 0, +-inf / +-inf -> 0 */
    {{TYPE}} p = fast_fmin4_{{NAME}}(x, y, z, w);
    return rounded_add_impl_{{NAME}}(ROUND_DOWNWARD, p, lo3);
}

//
// Vector Operations
//

extern {{TYPE}} rounded_hw_vector_sum_{{NAME}}(HsInt mode, HsInt length, HsInt offset, const {{TYPE}} *a)
{
    switch (hs_rounding_mode_to_native(mode)) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        {
            {{TYPE}} s = 0.0{{LIT_SUFFIX}};
            for (HsInt i = 0; i < length; ++i) {
                s = rounded_add_impl_{{NAME}}({{MODE}}, s, a[offset + i]);
            }
            return s;
        }
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
}

extern void rounded_hw_vector_add_{{NAME}}(HsInt mode, HsInt length, HsInt offsetR, {{TYPE}} * restrict result, HsInt offsetA, const {{TYPE}} * restrict a, HsInt offsetB, const {{TYPE}} * restrict b)
{
    // TODO: Use SIMD
    switch (hs_rounding_mode_to_native(mode)) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        for (HsInt i = 0; i < length; ++i) {
            result[offsetR + i] = rounded_add_impl_{{NAME}}({{MODE}}, a[offsetA + i], b[offsetB + i]);
        }
        break;
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
}

extern void rounded_hw_vector_sub_{{NAME}}(HsInt mode, HsInt length, HsInt offsetR, {{TYPE}} * restrict result, HsInt offsetA, const {{TYPE}} * restrict a, HsInt offsetB, const {{TYPE}} * restrict b)
{
    // TODO: Use SIMD
    switch (hs_rounding_mode_to_native(mode)) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        for (HsInt i = 0; i < length; ++i) {
            result[offsetR + i] = rounded_sub_impl_{{NAME}}({{MODE}}, a[offsetA + i], b[offsetB + i]);
        }
        break;
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
}

extern void rounded_hw_vector_mul_{{NAME}}(HsInt mode, HsInt length, HsInt offsetR, {{TYPE}} * restrict result, HsInt offsetA, const {{TYPE}} * restrict a, HsInt offsetB, const {{TYPE}} * restrict b)
{
    // TODO: Use SIMD
    switch (hs_rounding_mode_to_native(mode)) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        for (HsInt i = 0; i < length; ++i) {
            result[offsetR + i] = rounded_mul_impl_{{NAME}}({{MODE}}, a[offsetA + i], b[offsetB + i]);
        }
        break;
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
}

extern void rounded_hw_vector_div_{{NAME}}(HsInt mode, HsInt length, HsInt offsetR, {{TYPE}} * restrict result, HsInt offsetA, const {{TYPE}} * restrict a, HsInt offsetB, const {{TYPE}} * restrict b)
{
    // TODO: Use SIMD
    switch (hs_rounding_mode_to_native(mode)) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        for (HsInt i = 0; i < length; ++i) {
            result[offsetR + i] = rounded_div_impl_{{NAME}}({{MODE}}, a[offsetA + i], b[offsetB + i]);
        }
        break;
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
}

extern void rounded_hw_vector_sqrt_{{NAME}}(HsInt mode, HsInt length, HsInt offsetR, {{TYPE}} * restrict result, HsInt offsetA, const {{TYPE}} * restrict a)
{
    // TODO: Use SIMD
    switch (hs_rounding_mode_to_native(mode)) {
{{#each_static_rounding_mode}}
    case {{MODE}}:
        for (HsInt i = 0; i < length; ++i) {
            result[offsetR + i] = rounded_sqrt_impl_{{NAME}}({{MODE}}, a[offsetA + i]);
        }
        break;
{{/each_static_rounding_mode}}
    default:
        UNREACHABLE();
        abort();
    }
}
