-- This file was generated by etc/GenFFIWrapper.hs
-- DO NOT EDIT this file directly!
{-# LANGUAGE MagicHash #-}
{-# LANGUAGE UnliftedFFITypes #-}
module FFIWrapper.Double where
import Data.Int
import Data.Word
import GHC.Exts
import Numeric.Rounded.Hardware.Base.Rounding
import FFIImports

roundedAdd :: RoundingMode -> Double -> Double -> Double
roundedAdd rn = c_rounded_add_double (fromEnum rn)
{-# INLINE [1] roundedAdd #-}
{-# RULES
"roundedAdd/TowardNegInf" [~1] roundedAdd TowardNegInf = c_rounded_add_double_down
"roundedAdd/TowardInf" [~1] roundedAdd TowardInf = c_rounded_add_double_up
"roundedAdd/TowardZero" [~1] roundedAdd TowardZero = c_rounded_add_double_zero
  #-}

roundedSub :: RoundingMode -> Double -> Double -> Double
roundedSub rn = c_rounded_sub_double (fromEnum rn)
{-# INLINE [1] roundedSub #-}
{-# RULES
"roundedSub/TowardNegInf" [~1] roundedSub TowardNegInf = c_rounded_sub_double_down
"roundedSub/TowardInf" [~1] roundedSub TowardInf = c_rounded_sub_double_up
"roundedSub/TowardZero" [~1] roundedSub TowardZero = c_rounded_sub_double_zero
  #-}

roundedMul :: RoundingMode -> Double -> Double -> Double
roundedMul rn = c_rounded_mul_double (fromEnum rn)
{-# INLINE [1] roundedMul #-}
{-# RULES
"roundedMul/TowardNegInf" [~1] roundedMul TowardNegInf = c_rounded_mul_double_down
"roundedMul/TowardInf" [~1] roundedMul TowardInf = c_rounded_mul_double_up
"roundedMul/TowardZero" [~1] roundedMul TowardZero = c_rounded_mul_double_zero
  #-}

roundedDiv :: RoundingMode -> Double -> Double -> Double
roundedDiv rn = c_rounded_div_double (fromEnum rn)
{-# INLINE [1] roundedDiv #-}
{-# RULES
"roundedDiv/TowardNegInf" [~1] roundedDiv TowardNegInf = c_rounded_div_double_down
"roundedDiv/TowardInf" [~1] roundedDiv TowardInf = c_rounded_div_double_up
"roundedDiv/TowardZero" [~1] roundedDiv TowardZero = c_rounded_div_double_zero
  #-}

roundedSqrt :: RoundingMode -> Double -> Double
roundedSqrt rn = c_rounded_sqrt_double (fromEnum rn)
{-# INLINE [1] roundedSqrt #-}
{-# RULES
"roundedSqrt/TowardNegInf" [~1] roundedSqrt TowardNegInf = c_rounded_sqrt_double_down
"roundedSqrt/TowardInf" [~1] roundedSqrt TowardInf = c_rounded_sqrt_double_up
"roundedSqrt/TowardZero" [~1] roundedSqrt TowardZero = c_rounded_sqrt_double_zero
  #-}

roundedFMA :: RoundingMode -> Double -> Double -> Double -> Double
roundedFMA rn = c_rounded_fma_double (fromEnum rn)
{-# INLINE [1] roundedFMA #-}
{-# RULES
"roundedFMA/TowardNegInf" [~1] roundedFMA TowardNegInf = c_rounded_fma_double_down
"roundedFMA/TowardInf" [~1] roundedFMA TowardInf = c_rounded_fma_double_up
"roundedFMA/TowardZero" [~1] roundedFMA TowardZero = c_rounded_fma_double_zero
  #-}

roundedFromInt64 :: RoundingMode -> Int64 -> Double
roundedFromInt64 rn = c_rounded_int64_to_double (fromEnum rn)
{-# INLINE [1] roundedFromInt64 #-}
{-# RULES
"roundedFromInt64/TowardNegInf" [~1] roundedFromInt64 TowardNegInf = c_rounded_int64_to_double_down
"roundedFromInt64/TowardInf" [~1] roundedFromInt64 TowardInf = c_rounded_int64_to_double_up
"roundedFromInt64/TowardZero" [~1] roundedFromInt64 TowardZero = c_rounded_int64_to_double_zero
  #-}

roundedFromWord64 :: RoundingMode -> Word64 -> Double
roundedFromWord64 rn = c_rounded_word64_to_double (fromEnum rn)
{-# INLINE [1] roundedFromWord64 #-}
{-# RULES
"roundedFromWord64/TowardNegInf" [~1] roundedFromWord64 TowardNegInf = c_rounded_word64_to_double_down
"roundedFromWord64/TowardInf" [~1] roundedFromWord64 TowardInf = c_rounded_word64_to_double_up
"roundedFromWord64/TowardZero" [~1] roundedFromWord64 TowardZero = c_rounded_word64_to_double_zero
  #-}

roundedSumPtr :: RoundingMode -> Int -> Int -> Ptr Double -> IO Double
roundedSumPtr rn = c_rounded_sum_ptr_double (fromEnum rn)
{-# INLINE [1] roundedSumPtr #-}
{-# RULES
"roundedSumPtr/TowardNegInf" [~1] roundedSumPtr TowardNegInf = c_rounded_sum_ptr_double_down
"roundedSumPtr/TowardInf" [~1] roundedSumPtr TowardInf = c_rounded_sum_ptr_double_up
"roundedSumPtr/TowardZero" [~1] roundedSumPtr TowardZero = c_rounded_sum_ptr_double_zero
  #-}

roundedSumByteArray :: RoundingMode -> Int -> Int -> ByteArray# -> Double
roundedSumByteArray rn = c_rounded_sum_bytearr_double (fromEnum rn)
{-# INLINE [1] roundedSumByteArray #-}
{-# RULES
"roundedSumByteArray/TowardNegInf" [~1] roundedSumByteArray TowardNegInf = c_rounded_sum_bytearr_double_down
"roundedSumByteArray/TowardInf" [~1] roundedSumByteArray TowardInf = c_rounded_sum_bytearr_double_up
"roundedSumByteArray/TowardZero" [~1] roundedSumByteArray TowardZero = c_rounded_sum_bytearr_double_zero
  #-}
